#!/usr/bin/env bash

: <<!
Name: save-docker-images
Author: YJ
Email: yj1516268@outlook.com
Created Time: 2020-04-27 13:47:18

Description: 备份docker镜像

Attentions:
- 0. 进行权限认证
- 1. 判断是否能够取得存储路径参数：能--使用该参数；不能--使用默认存储路径
- 2. 判断参数类型：空文件/非空文件/文件夹/字符串，分别返回不同值
- 3. 根据返回值进行具体操作

Depends:
- systemd
- docker
!

####################################################################
#+++++++++++++++++++++++++ Define Variable ++++++++++++++++++++++++#
####################################################################
#------------------------- Program Variable
# program name
readonly name=$(basename "$0")
# program version
readonly major_version=1.1
readonly minor_version=202008014
readonly rel_version=1

#------------------------- Exit Code Variable
readonly normal=0           # 一切正常
readonly err_param=2        # 参数错误
readonly err_permission=110 # 权限错误
readonly err_unknown=255    # 未知错误

#------------------------- Parameter Variable
# description variable
readonly desc="是Linux中用来备份docker image的工具"
# path variable
readonly images_savefile="$HOME/Documents/LocalBackups/docker/Mydocker.images" # 默认保存路径
# detection variable
readonly group_docker=$(grep -E 'docker' /etc/group) # 检索'docker'组
# time variable
readonly time_out=60 # 输入超时

####################################################################
#+++++++++++++++++++++++++ Define Function ++++++++++++++++++++++++#
####################################################################
#------------------------- Info Function
function helpInfo() {
  echo -e ""
  echo -e "\e[32m$name\e[0m\e[1m$desc\e[0m"
  echo -e "--------------------------------------------------"
  echo -e "\\e[1;33m默认备份路径\\e[0m: \\e[34m$images_savefile\\e[0m"
  echo -e "--------------------------------------------------"
  echo -e "Usage:"
  echo -e ""
  echo -e "     $name [options]"
  echo -e ""
  echo -e "options:"
  echo -e "     /path/to/save.file     备份文件路径"
  echo -e ""
  echo -e "     -h, --help             显示帮助选项"
  echo -e "     -v, --version          显示版本选项"
}

function versionInfo() {
  echo -e "\e[1m$name\e[0m version (\e[1m$major_version-$minor_version.$rel_version\e[0m)"
}

#------------------------- Feature Function
function createFolder() {
  mkdir -p "$1"
}

function userAuthentication() {
  # 权限认证
  if [[ -n $group_docker ]]; then
    # 有'docker'组
    if [[ $group_docker =~ $USER ]]; then
      # 当前用户在'docker'组
      return 0
    else
      # 当前用户不在'docker'组
      echo -e "\\e[31m[✘]\\e[0m 用户$USER不是docker组成员，请将其添加到docker组后重试"
      return 2
    fi
  else
    # 没有'docker'组
    echo -e "\\e[31m[✘]\\e[0m docker组不存在，请创建并将$USER添加到该组后重试"
    return 1
  fi
}

function saveImage() {
  # 备份images
  if systemctl is-active docker &>/dev/null; then
    docker save $(docker images --format '{{.Repository}}') -o "$1" # 不要使用引号
  else
    echo -e "\\e[31m[✘]\\e[0m docker服务未启动，请在启动后重试"
  fi
}

function getFilename() {
  # 分解路径字符串得到基础文件名
  case "$1" in
  --help | -h | help | h)
    parameterType "$1"
    ;;
  *)
    filename="$(basename "$1")"
    ;;
  esac
}

function getDirname() {
  # 分解路径字符串得到文件夹名
  dirname="$(dirname "$1")"
}

function nonemptyFile() {
  # 非空文件覆写提示
  echo -e "$1是一个非空文件! ! !"
}

function askQuestion() {
  # 用户进行确认
  while true; do
    read -e -t "$time_out" -r -p "$1"
    REPLY=${REPLY:-N} # 默认回答是No
    echo -e ""
    if [[ "$REPLY" =~ ^[Yy] ]]; then
      return 0
    elif [[ "$REPLY" =~ ^[Nn] ]]; then
      return 1
    else
      echo -e "应输入 Y/y 或 N/n"
      echo -e ""
    fi
  done
}

function parameterType() {
  # 判断参数类型：空文件/非空文件/文件夹/字符串
  # return param_type：空文件=100 / 非空文件=101 / 文件夹=102 / 字符串=103
  parameter="$1"
  if [[ $parameter == 'help' ]] || [[ $parameter == '--help' ]] || [[ $parameter == 'h' ]] || [[ $parameter == '-h' ]]; then
    return 103
  elif [[ ! -e $parameter ]] || [[ ! -s $parameter ]]; then # 文件不存在或者存在但大小为0
    return 100
  elif [[ -s $parameter ]]; then # 非空文件
    return 101
  elif [[ -d $parameter ]]; then # 文件夹
    return 102
  else # 其他，一般是字符串
    return 255
  fi
}

function exitProgram() {
  # 退出
  echo -e "$1"
  exit "$2"
}

####################################################################
#++++++++++++++++++++++++++++++ Main ++++++++++++++++++++++++++++++#
####################################################################
if userAuthentication; then
  if [[ -n $1 ]]; then # 给定一个参数
    getFilename "$1"   # return filename
    parameterType "$1" # case行到本行之间不能有其他代码
    case $? in
    100) # 参数是一个空文件
      echo -e "备份文件存储在: $1\n"
      echo -e "备份文件名为: $filename\n"
      if askQuestion "是否确认备份？ [y/N] "; then
        createFolder "$dirname" # create folder
        echo -e "正在备份docker images，请耐心等待..."
        saveImage "$1"
      else
        exitProgram "退出" $normal
      fi
      ;;
    101) # 参数是一个非空文件
      echo -e "备份文件存储在: $1\n"
      echo -e "备份文件名为: $filename\n"
      nonemptyFile "$filename" # 非空文件覆写提示
      if askQuestion "是否确认覆写，原备份文件内容将丢失？ [y/N] "; then
        echo -e "正在备份docker images，请耐心等待..."
        saveImage "$1"
      else
        exitProgram "退出" $normal
      fi
      ;;
    102) # 参数是一个文件夹
      exitProgram "参数是一个文件夹，请将文件作为参数" $err_param
      ;;
    103) # 参数是一个字符串
      case $1 in
      -h | --help)
        helpInfo
        exit $normal
        ;;
      -v | --version)
        versionInfo
        exit $normal
        ;;
      *)
        helpInfo
        exitProgram "\n\n使用 help 参数查看帮助信息" $err_unknown
        ;;
      esac
      ;;
    *)
      helpInfo
      exitProgram "\n\n使用 help 参数查看帮助信息" $err_unknown
      ;;
    esac
  else                             # 没有指定备份文件存储位置，使用默认值
    getDirname "$images_savefile"  # return dirname
    getFilename "$images_savefile" # return filename
    echo -e "未给出存储路径，使用默认值: $images_savefile"
    echo -e "备份文件名为: $filename\n"
    if [[ ! -s $images_savefile ]]; then # 默认文件是一个空文件
      if askQuestion "是否确认备份？ [y/N] "; then
        createFolder "$dirname" # create folder
        echo -e "正在备份docker images，数据量大，请耐心等待..."
        saveImage "$images_savefile"
      else
        exitProgram "退出" $normal
      fi
    elif [[ -d $images_savefile ]]; then # 默认参数是一个文件夹（一般情况不会出现）
      exitProgram "默认存储路径是一个文件夹，请确认参数是一个文件" $err_param
    elif [[ -s $images_savefile ]]; then # 默认文件是一个非空文件
      nonemptyFile "$filename"           # 非空文件覆写提示
      if askQuestion "是否确认覆写，原内容将丢失？ [y/N] "; then
        echo -e "正在备份docker images，数据量大，请耐心等待..."
        saveImage "$images_savefile"
      else
        exitProgram "退出" $normal
      fi
    fi
  fi
else
  exitProgram "权限认证失败" $err_permission
fi
